// <auto-generated />
using System;
using BackEnd_Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd_Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250629151129_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEnd_Api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BackEnd_Api.Models.Arrest", b =>
                {
                    b.Property<int>("SuspectId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ArrestEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ArrestStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OfficerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuspectMirandaSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuspectId", "CaseId");

                    b.HasIndex("CaseId");

                    b.HasIndex("OfficerId");

                    b.ToTable("Arrests");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("BackEnd_Api.Models.CaseEvidence", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CaseId", "EvidenceId");

                    b.HasIndex("EvidenceId");

                    b.ToTable("CaseEvidences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.CaseResult", b =>
                {
                    b.Property<int>("CaseResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseResultId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("IdentifyMotive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReportAnalyst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseResultId");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseResults");
                });

            modelBuilder.Entity("BackEnd_Api.Models.DigitalInvest", b =>
                {
                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<string>("AnalystTool")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvidenceId");

                    b.ToTable("DigitalInvests");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SuspectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("CaseId");

                    b.HasIndex("SuspectId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Evidence", b =>
                {
                    b.Property<int>("EvidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvidenceId"));

                    b.Property<string>("AttachedFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeasureSurveyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarrantResultId")
                        .HasColumnType("int");

                    b.HasKey("EvidenceId");

                    b.HasIndex("CollectedBy");

                    b.HasIndex("MeasureSurveyId");

                    b.HasIndex("ReportId");

                    b.HasIndex("WarrantResultId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.FinancialInvest", b =>
                {
                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvidenceId");

                    b.ToTable("FinancialInvests");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ForensicInvest", b =>
                {
                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvidenceId");

                    b.ToTable("ForensicInvests");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Indictment", b =>
                {
                    b.Property<int>("IndictmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndictmentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProsecutionId")
                        .HasColumnType("int");

                    b.HasKey("IndictmentId");

                    b.HasIndex("ProsecutionId");

                    b.ToTable("Indictments");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Inmate", b =>
                {
                    b.Property<int>("InmateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InmateId"));

                    b.Property<string>("AssignedFacility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedRelease")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SentenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InmateId");

                    b.HasIndex("SentenceId");

                    b.ToTable("Inmates");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewId"));

                    b.Property<string>("AttachedFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntervieweeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InterviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("InvestigationPlanId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeInterviewee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterviewId");

                    b.HasIndex("IntervieweeId");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("InvestigationPlanId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("BackEnd_Api.Models.InvestigationPlan", b =>
                {
                    b.Property<int>("InvestigationPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationPlanId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedOfficerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PlanContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvestigationPlanId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedOfficerId");

                    b.ToTable("InvestigationPlans");
                });

            modelBuilder.Entity("BackEnd_Api.Models.MeasureSurvey", b =>
                {
                    b.Property<int>("MeasureSurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasureSurveyId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasureSurveyId");

                    b.ToTable("MeasureSurveys");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("BackEnd_Api.Models.PhysicalInvest", b =>
                {
                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("EvidenceId");

                    b.ToTable("PhysicalInvests");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Prosecution", b =>
                {
                    b.Property<int>("ProsecutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProsecutionId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProsecutorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProsecutionId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ProsecutorId");

                    b.ToTable("Prosecutions");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ProsecutionSuspect", b =>
                {
                    b.Property<int>("ProsecutionId")
                        .HasColumnType("int");

                    b.Property<int>("SuspectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProsecutionId", "SuspectId");

                    b.HasIndex("SuspectId");

                    b.ToTable("ProsecutionSuspects");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reliability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InterviewId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BackEnd_Api.Models.RecordInfo", b =>
                {
                    b.Property<int>("RecordInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordInfoId"));

                    b.Property<DateTime>("DateCollected")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordInfoId");

                    b.HasIndex("EvidenceId");

                    b.ToTable("RecordInfos");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CaseLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OfficerApproveId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReporterEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterFullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterPhonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("CaseId");

                    b.HasIndex("OfficerApproveId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ReportSuspect", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("SuspectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ReportId", "SuspectId");

                    b.HasIndex("SuspectId");

                    b.ToTable("ReportSuspects");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ReportVictim", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("VictimId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ReportId", "VictimId");

                    b.HasIndex("VictimId");

                    b.ToTable("ReportVictims");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackEnd_Api.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Sentence", b =>
                {
                    b.Property<int>("SentenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SentenceId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("CaseResultId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SentenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentencingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SentenceId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseResultId");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Suspect", b =>
                {
                    b.Property<int>("SuspectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuspectId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CatchTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FingerprintsHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MugshotUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("National")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuspectId");

                    b.HasIndex("CaseId");

                    b.ToTable("Suspects");
                });

            modelBuilder.Entity("BackEnd_Api.Models.SuspectEvidence", b =>
                {
                    b.Property<int>("SuspectId")
                        .HasColumnType("int");

                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SuspectId", "EvidenceId");

                    b.HasIndex("EvidenceId");

                    b.ToTable("SuspectEvidences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Timeline", b =>
                {
                    b.Property<int>("TimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimelineId"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachedFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseResultId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TimelineId");

                    b.HasIndex("CaseResultId");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("BackEnd_Api.Models.UserCase", b =>
                {
                    b.Property<string>("OfficerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Responsible")
                        .HasColumnType("bit");

                    b.HasKey("OfficerId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("UserCases");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Victim", b =>
                {
                    b.Property<int>("VictimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VictimId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Injuries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VictimId");

                    b.HasIndex("CaseId");

                    b.ToTable("Victims");
                });

            modelBuilder.Entity("BackEnd_Api.Models.VictimInterview", b =>
                {
                    b.Property<int>("VictimId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("VictimId", "InterviewId");

                    b.HasIndex("InterviewId");

                    b.ToTable("VictimInterviews");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Warrant", b =>
                {
                    b.Property<int>("WarrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantId"));

                    b.Property<string>("AttachedFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimePublish")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarrantId");

                    b.HasIndex("CaseId");

                    b.ToTable("Warrants");
                });

            modelBuilder.Entity("BackEnd_Api.Models.WarrantEvidence", b =>
                {
                    b.Property<int>("WarrantId")
                        .HasColumnType("int");

                    b.Property<int>("EvidenceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("WarrantId", "EvidenceId");

                    b.HasIndex("EvidenceId");

                    b.ToTable("WarrantEvidences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.WarrantResult", b =>
                {
                    b.Property<int>("WarrantResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantResultId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliceResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeActive")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarrantId")
                        .HasColumnType("int");

                    b.HasKey("WarrantResultId");

                    b.HasIndex("WarrantId");

                    b.ToTable("WarrantResults");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Witness", b =>
                {
                    b.Property<int>("WitnessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WitnessId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WitnessId");

                    b.HasIndex("CaseId");

                    b.ToTable("Witnesses");
                });

            modelBuilder.Entity("BackEnd_Api.Models.WitnessInterview", b =>
                {
                    b.Property<int>("WitnessId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("WitnessId", "InterviewId");

                    b.HasIndex("InterviewId");

                    b.ToTable("WitnessInterviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackEnd_Api.Models.ApplicationUser", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Arrest", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Arrests")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "Officer")
                        .WithMany("Arrests")
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Suspect", "Suspect")
                        .WithMany("Arrests")
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Officer");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("BackEnd_Api.Models.CaseEvidence", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("CaseEvidences")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithMany("CaseEvidences")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.CaseResult", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("CaseResults")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("BackEnd_Api.Models.DigitalInvest", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithOne("DigitalInvest")
                        .HasForeignKey("BackEnd_Api.Models.DigitalInvest", "EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Event", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Events")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Suspect", "Suspect")
                        .WithMany("Events")
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Evidence", b =>
                {
                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "CollectedByUser")
                        .WithMany("EvidencesCollected")
                        .HasForeignKey("CollectedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.MeasureSurvey", "MeasureSurvey")
                        .WithMany()
                        .HasForeignKey("MeasureSurveyId");

                    b.HasOne("BackEnd_Api.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("BackEnd_Api.Models.WarrantResult", "WarrantResult")
                        .WithMany()
                        .HasForeignKey("WarrantResultId");

                    b.Navigation("CollectedByUser");

                    b.Navigation("MeasureSurvey");

                    b.Navigation("Report");

                    b.Navigation("WarrantResult");
                });

            modelBuilder.Entity("BackEnd_Api.Models.FinancialInvest", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithOne("FinancialInvest")
                        .HasForeignKey("BackEnd_Api.Models.FinancialInvest", "EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ForensicInvest", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithOne("ForensicInvest")
                        .HasForeignKey("BackEnd_Api.Models.ForensicInvest", "EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Indictment", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Prosecution", "Prosecution")
                        .WithMany("Indictments")
                        .HasForeignKey("ProsecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prosecution");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Inmate", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Sentence", "Sentence")
                        .WithMany("Inmates")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Interview", b =>
                {
                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "Interviewee")
                        .WithMany()
                        .HasForeignKey("IntervieweeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "Interviewer")
                        .WithMany("Interviews")
                        .HasForeignKey("InterviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.InvestigationPlan", "InvestigationPlan")
                        .WithMany("Interviews")
                        .HasForeignKey("InvestigationPlanId");

                    b.Navigation("Interviewee");

                    b.Navigation("Interviewer");

                    b.Navigation("InvestigationPlan");
                });

            modelBuilder.Entity("BackEnd_Api.Models.InvestigationPlan", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("InvestigationPlans")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "CreatedOfficer")
                        .WithMany("InvestigationPlans")
                        .HasForeignKey("CreatedOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CreatedOfficer");
                });

            modelBuilder.Entity("BackEnd_Api.Models.PhysicalInvest", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithOne("PhysicalInvest")
                        .HasForeignKey("BackEnd_Api.Models.PhysicalInvest", "EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Prosecution", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Prosecutions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "Prosecutor")
                        .WithMany("Prosecutions")
                        .HasForeignKey("ProsecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Prosecutor");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ProsecutionSuspect", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Prosecution", "Prosecution")
                        .WithMany("ProsecutionSuspects")
                        .HasForeignKey("ProsecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Suspect", "Suspect")
                        .WithMany("ProsecutionSuspects")
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Prosecution");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Question", b =>
                {
                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Interview", "Interview")
                        .WithMany("Questions")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("BackEnd_Api.Models.RecordInfo", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithMany("RecordInfos")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Report", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Reports")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "OfficerApprove")
                        .WithMany("ReportsApproved")
                        .HasForeignKey("OfficerApproveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("OfficerApprove");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ReportSuspect", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Report", "Report")
                        .WithMany("ReportSuspects")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Suspect", "Suspect")
                        .WithMany("ReportSuspects")
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("BackEnd_Api.Models.ReportVictim", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Report", "Report")
                        .WithMany("ReportVictims")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Victim", "Victim")
                        .WithMany("ReportVictims")
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("BackEnd_Api.Models.RolePermission", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Sentence", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Sentences")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.CaseResult", "CaseResult")
                        .WithMany("Sentences")
                        .HasForeignKey("CaseResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CaseResult");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Suspect", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Suspects")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("BackEnd_Api.Models.SuspectEvidence", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithMany("SuspectEvidences")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Suspect", "Suspect")
                        .WithMany("SuspectEvidences")
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Timeline", b =>
                {
                    b.HasOne("BackEnd_Api.Models.CaseResult", "CaseResult")
                        .WithMany("Timelines")
                        .HasForeignKey("CaseResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseResult");
                });

            modelBuilder.Entity("BackEnd_Api.Models.UserCase", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("UserCases")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", "User")
                        .WithMany("UserCases")
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Victim", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Victims")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("BackEnd_Api.Models.VictimInterview", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Interview", "Interview")
                        .WithMany("VictimInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Victim", "Victim")
                        .WithMany("VictimInterviews")
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Warrant", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Warrants")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("BackEnd_Api.Models.WarrantEvidence", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Evidence", "Evidence")
                        .WithMany("WarrantEvidences")
                        .HasForeignKey("EvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Warrant", "Warrant")
                        .WithMany("WarrantEvidences")
                        .HasForeignKey("WarrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");

                    b.Navigation("Warrant");
                });

            modelBuilder.Entity("BackEnd_Api.Models.WarrantResult", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Warrant", "Warrant")
                        .WithMany("WarrantResults")
                        .HasForeignKey("WarrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warrant");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Witness", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Case", "Case")
                        .WithMany("Witnesses")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("BackEnd_Api.Models.WitnessInterview", b =>
                {
                    b.HasOne("BackEnd_Api.Models.Interview", "Interview")
                        .WithMany("WitnessInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.Witness", "Witness")
                        .WithMany("WitnessInterviews")
                        .HasForeignKey("WitnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Witness");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackEnd_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackEnd_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackEnd_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd_Api.Models.ApplicationUser", b =>
                {
                    b.Navigation("Arrests");

                    b.Navigation("EvidencesCollected");

                    b.Navigation("Interviews");

                    b.Navigation("InvestigationPlans");

                    b.Navigation("Prosecutions");

                    b.Navigation("Questions");

                    b.Navigation("ReportsApproved");

                    b.Navigation("UserCases");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Case", b =>
                {
                    b.Navigation("Arrests");

                    b.Navigation("CaseEvidences");

                    b.Navigation("CaseResults");

                    b.Navigation("Events");

                    b.Navigation("InvestigationPlans");

                    b.Navigation("Prosecutions");

                    b.Navigation("Reports");

                    b.Navigation("Sentences");

                    b.Navigation("Suspects");

                    b.Navigation("UserCases");

                    b.Navigation("Victims");

                    b.Navigation("Warrants");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("BackEnd_Api.Models.CaseResult", b =>
                {
                    b.Navigation("Sentences");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Evidence", b =>
                {
                    b.Navigation("CaseEvidences");

                    b.Navigation("DigitalInvest")
                        .IsRequired();

                    b.Navigation("FinancialInvest")
                        .IsRequired();

                    b.Navigation("ForensicInvest")
                        .IsRequired();

                    b.Navigation("PhysicalInvest")
                        .IsRequired();

                    b.Navigation("RecordInfos");

                    b.Navigation("SuspectEvidences");

                    b.Navigation("WarrantEvidences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Interview", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("VictimInterviews");

                    b.Navigation("WitnessInterviews");
                });

            modelBuilder.Entity("BackEnd_Api.Models.InvestigationPlan", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Prosecution", b =>
                {
                    b.Navigation("Indictments");

                    b.Navigation("ProsecutionSuspects");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Report", b =>
                {
                    b.Navigation("ReportSuspects");

                    b.Navigation("ReportVictims");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Sentence", b =>
                {
                    b.Navigation("Inmates");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Suspect", b =>
                {
                    b.Navigation("Arrests");

                    b.Navigation("Events");

                    b.Navigation("ProsecutionSuspects");

                    b.Navigation("ReportSuspects");

                    b.Navigation("SuspectEvidences");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Victim", b =>
                {
                    b.Navigation("ReportVictims");

                    b.Navigation("VictimInterviews");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Warrant", b =>
                {
                    b.Navigation("WarrantEvidences");

                    b.Navigation("WarrantResults");
                });

            modelBuilder.Entity("BackEnd_Api.Models.Witness", b =>
                {
                    b.Navigation("WitnessInterviews");
                });
#pragma warning restore 612, 618
        }
    }
}
